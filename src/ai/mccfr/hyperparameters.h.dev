// Copyright 2021 Marzuk Rashid

#ifndef SRC_AI_MCCFR_HYPERPARAMETERS_H_
#define SRC_AI_MCCFR_HYPERPARAMETERS_H_

#include <cstdint>
#include <filesystem>
#include <limits>
#include <string>

#include "mccfr/definitions.h"
#include "poker/definitions.h"

namespace fishbait {

namespace hparam {

constexpr PlayerN kPlayers = 6;
constexpr int kActions = 3;

constexpr std::array<AbstractAction, kActions> kActionArr = {{
    {Action::kFold},
    {Action::kCheckCall},
    {Action::kAllIn},
}};

/* The total time to run training in minutes. */
constexpr double kTrainingTime = 1;

/* The number of iterations between each update of the average strategy. */
constexpr int kStrategyInterval = 1;

/* The number of minutes to wait before pruning. */
constexpr int kPruneThreshold = 200;

/* The probability that we prune in Traverse-MCCFR. */
constexpr double kPruneProbability = 0.95;

/* Actions with regret less than or equal to this constant are eligible to be
    pruned. */
constexpr Regret kPruneConstant = -300000000;

/* The number of minutes to apply LCFR. */
constexpr int kLCFRThreshold = 400;

/* The number of minutes between each LCFR discount. */
constexpr int kDiscountInterval = 10;  // 10 minutes

/* Floor to cutoff negative regrets at. */
constexpr Regret kRegretFloor = -310000000;

/* The number of minutes between each snapshot. */
constexpr int kSnapshotInterval = 0;

/* The number of minutes to wait before updating the average strategy and
    taking snapshots. */
constexpr int kStrategyDelay = 0;

/* The number of means to evaluate succesive bot performance */
constexpr int kBattleMeans = 1;

/* The number of trials per mean to evaluate successive bot performance */
constexpr int kBattleTrials = 1;

const std::filesystem::path kSaveDir = "out/ai/mccfr/dev";
const std::filesystem::path kAvgPath = kSaveDir / "average_final.cereal";
const std::filesystem::path kFinalStrategyPath =
    kSaveDir / "strategy_final.cereal";

}  // namespace hparam

}  // namespace fishbait

#endif  // SRC_AI_MCCFR_HYPERPARAMETERS_H_
