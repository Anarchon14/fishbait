# Copyright 2021 Marzuk Rashid

# setup venv if it doesn't exist
if(NOT EXISTS "${CMAKE_CURRENT_BINARY_DIR}/venv")
  message(STATUS "Creating python virtual environment")
  find_package(Python3 3.10)
  execute_process(
    COMMAND ${Python3_EXECUTABLE} "-m" "venv" "venv" "--copies"
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    RESULTS_VARIABLE venv_status
    )
  execute_process(
    COMMAND touch -t 200001010000 venv
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    RESULTS_VARIABLE touch_status
    )
  if(venv_status)
    message(FATAL_ERROR "Failed to create python virtual enviornment: "
            ${venv_status}
            )
  elseif(touch_status)
    message(FATAL_ERROR "Failed to touch python virtual enviornment: "
            ${touch_status}
            )
  endif()
endif()

# update venv packages
add_custom_command(
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/venv
  COMMAND ${CMAKE_CURRENT_BINARY_DIR}/venv/bin/pip install -r
          ${CMAKE_CURRENT_SOURCE_DIR}/api/requirements.txt
  COMMAND touch -r ${CMAKE_CURRENT_SOURCE_DIR}/api/requirements.txt
          ${CMAKE_CURRENT_BINARY_DIR}/venv
  COMMENT "Updating python virtual environment packages"
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/api/requirements.txt
  )

# update npm packages
add_custom_command(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/node_modules
  COMMAND yarn install
  COMMAND touch -r package.json ${CMAKE_CURRENT_SOURCE_DIR}/node_modules
  COMMENT "Updating npm packages"
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/package.json
  )

# build the react app and update the list of files it depends on
add_custom_command(
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/build
  COMMAND ${CMAKE_COMMAND} -E echo_append "${CMAKE_CURRENT_BINARY_DIR}/build "
          "${CMAKE_CURRENT_BINARY_DIR}/filelist.d : " >
          ${CMAKE_CURRENT_BINARY_DIR}/filelist.d
  COMMAND find ${CMAKE_CURRENT_SOURCE_DIR}
          -path ${CMAKE_CURRENT_SOURCE_DIR}/node_modules -prune -o -print |
          tr '\\n' ' ' >> ${CMAKE_CURRENT_BINARY_DIR}/filelist.d
  COMMAND ${CMAKE_COMMAND} -E rm -rf ${CMAKE_CURRENT_BINARY_DIR}/build
  COMMAND yarn build
  COMMAND ${CMAKE_COMMAND} -E rename build ${CMAKE_CURRENT_BINARY_DIR}/build
  COMMAND touch -r ${CMAKE_CURRENT_BINARY_DIR}/build
          ${CMAKE_CURRENT_SOURCE_DIR}
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  COMMENT "building interface frontend"
  DEPFILE ${CMAKE_CURRENT_BINARY_DIR}/filelist.d
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/node_modules
  )

add_custom_target(interface ALL
                  DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/build
                          ${CMAKE_CURRENT_BINARY_DIR}/venv
                          ${CMAKE_CURRENT_SOURCE_DIR}/api/ctypes_wrappers.py
                  )

# create server run script
file(WRITE ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/interface.sh
     "#!/bin/sh\n"
     "cd ${CMAKE_CURRENT_SOURCE_DIR}\n"
     "export VENV_PY=${CMAKE_CURRENT_BINARY_DIR}/venv/bin/python\n"
     "if [ \"$1\" = \"frontend\" ]; then\n"
     "  yarn start-frontend\n"
     "elif [ \"$1\" = \"backend\" ]; then\n"
     "  yarn start-api\n"
     "else\n"
     "  yarn start\n"
     "fi"
     )
file(CHMOD ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/interface.sh
     PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE
                 WORLD_READ WORLD_EXECUTE
     )

# create the generate_ctypes_wrappers script
file(WRITE ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/generate_ctypes_wrappers.py
"#!/usr/bin/env python

# Copyright 2022 Marzuk Rashid

\'\'\'Script to generate the ctypes function wrappers.

Takes two positional arguments:
  1. The location to write the file with the function wrappers
  2. The maximum number of function arguments to generate wrappers for
\'\'\'

import sys
from typing import List

HEADER = \'\'\'# Copyright 2022 Marzuk Rashid

\\\'\\\'\\\'Wrappers that create nicely typed python functions from C functions

NOTE: THIS IS AN AUTOGENERATED FILE. DO NOT EDIT MANUALLY.
\\\'\\\'\\\'

from typing import TypeVar, Callable, Type, Tuple
from ctypes import CDLL

R = TypeVar('R')
def wrap_function_0(clib: CDLL, funcname: str, restype: Type[R]):
  \\\'\\\'\\\'C function with 0 arguments\\\'\\\'\\\'
  func: Callable[[], R] = getattr(clib, funcname)
  func.restype = restype
  func.argtypes = []
  return func
\'\'\'

VARIABLE_TEMPLATE = \'\'\'
{new_type_var} = TypeVar(\'{new_type_var}\')
def wrap_function_{num_args}(
  clib: CDLL,
  funcname: str,
  restype: Type[R],
  argtypes: Tuple[
    {fn_args}
  ]
):
  \\\'\\\'\\\'C function with {num_args} arguments\\\'\\\'\\\'
  func: Callable[
    [
      {type_vars}
    ], R
  ] = getattr(clib, funcname)
  func.restype = restype
  func.argtypes = list(argtypes)
  return func
'''

def letter_code(number: int):
  num_str = str(number)
  for i in range(10):
    to_replace = str(i)
    replace_with = chr(65 + i)
    num_str = num_str.replace(to_replace, replace_with)
  return num_str[:1] + num_str[1:].lower()

def main(argv: List[str]):
  with open(argv[1], mode=\'w\', encoding = \'utf-8\') as f:
    f.write(HEADER)
    type_var_list = []
    fn_arg_list = []
    for i in range(int(argv[2])): 
      new_type_var = letter_code(i)
      type_var_list.append(new_type_var)
      fn_arg_list.append(f\'Type[{new_type_var}]\')
      fn_args = \',\\n    \'.join([*fn_arg_list]) + ','
      type_vars = \',\\n      \'.join([*type_var_list]) + \',\'
      formatted = VARIABLE_TEMPLATE.format(
        new_type_var=new_type_var, fn_args=fn_args, type_vars=type_vars,
        num_args=i+1
      )
      f.write(formatted)

if __name__ == \'__main__\':
  main(sys.argv)
"
)
file(CHMOD ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/generate_ctypes_wrappers.py
     PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE
                 WORLD_READ WORLD_EXECUTE
     )

# generate the ctypes wrappers
set(WrappersToGenerate "6")
add_custom_command(
  OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/api/ctypes_wrappers.py
  COMMAND
    ${CMAKE_CURRENT_BINARY_DIR}/venv/bin/python
    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/generate_ctypes_wrappers.py
    ${CMAKE_CURRENT_SOURCE_DIR}/api/ctypes_wrappers.py
    ${WrappersToGenerate}
  COMMENT "generating ctypes wrappers"
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt
  )
