# Copyright 2022 Marzuk Rashid

'''Wrappers that create nicely typed python functions from C functions

NOTE: THIS IS AN AUTOGENERATED FILE. DO NOT EDIT MANUALLY.
'''

from typing import TypeVar, Callable, Type, Tuple
from ctypes import CDLL

R = TypeVar('R')
def wrap_function_0(clib: CDLL, funcname: str, restype: Type[R]):
  '''C function with 0 arguments'''
  func: Callable[[], R] = getattr(clib, funcname)
  func.restype = restype
  func.argtypes = []
  return func

A = TypeVar('A')
def wrap_function_1(
  clib: CDLL,
  funcname: str,
  restype: Type[R],
  argtypes: Tuple[
    Type[A],
  ]
):
  '''C function with 1 arguments'''
  func: Callable[
    [
      A,
    ], R
  ] = getattr(clib, funcname)
  func.restype = restype
  func.argtypes = list(argtypes)
  return func

B = TypeVar('B')
def wrap_function_2(
  clib: CDLL,
  funcname: str,
  restype: Type[R],
  argtypes: Tuple[
    Type[A],
    Type[B],
  ]
):
  '''C function with 2 arguments'''
  func: Callable[
    [
      A,
      B,
    ], R
  ] = getattr(clib, funcname)
  func.restype = restype
  func.argtypes = list(argtypes)
  return func

C = TypeVar('C')
def wrap_function_3(
  clib: CDLL,
  funcname: str,
  restype: Type[R],
  argtypes: Tuple[
    Type[A],
    Type[B],
    Type[C],
  ]
):
  '''C function with 3 arguments'''
  func: Callable[
    [
      A,
      B,
      C,
    ], R
  ] = getattr(clib, funcname)
  func.restype = restype
  func.argtypes = list(argtypes)
  return func

D = TypeVar('D')
def wrap_function_4(
  clib: CDLL,
  funcname: str,
  restype: Type[R],
  argtypes: Tuple[
    Type[A],
    Type[B],
    Type[C],
    Type[D],
  ]
):
  '''C function with 4 arguments'''
  func: Callable[
    [
      A,
      B,
      C,
      D,
    ], R
  ] = getattr(clib, funcname)
  func.restype = restype
  func.argtypes = list(argtypes)
  return func

E = TypeVar('E')
def wrap_function_5(
  clib: CDLL,
  funcname: str,
  restype: Type[R],
  argtypes: Tuple[
    Type[A],
    Type[B],
    Type[C],
    Type[D],
    Type[E],
  ]
):
  '''C function with 5 arguments'''
  func: Callable[
    [
      A,
      B,
      C,
      D,
      E,
    ], R
  ] = getattr(clib, funcname)
  func.restype = restype
  func.argtypes = list(argtypes)
  return func

F = TypeVar('F')
def wrap_function_6(
  clib: CDLL,
  funcname: str,
  restype: Type[R],
  argtypes: Tuple[
    Type[A],
    Type[B],
    Type[C],
    Type[D],
    Type[E],
    Type[F],
  ]
):
  '''C function with 6 arguments'''
  func: Callable[
    [
      A,
      B,
      C,
      D,
      E,
      F,
    ], R
  ] = getattr(clib, funcname)
  func.restype = restype
  func.argtypes = list(argtypes)
  return func
